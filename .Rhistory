nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
bootoutput = model$bootdata
mean(bootoutput$ATE)
var(bootoutput$ATE)
sqrt(var(bootoutput$ATE))
quantile(bootoutput$ATE, probs=c(0.025,0.975))
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
bootoutput = model$bootdata
mean(bootoutput$ATE)
var(bootoutput$ATE)
sqrt(var(bootoutput$ATE))
quantile(bootoutput$ATE, probs=c(0.025,0.975))
View(Wmsm)
Wmsm$weights
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
bootoutput = model$bootdata
library(knitr)
# Assuming bootoutput$ATE is available and contains the ATE data from the bootstrap
ate_stats <- data.frame(
Mean = mean(bootoutput$ATE),
Variance = var(bootoutput$ATE),
SD = sqrt(var(bootoutput$ATE)),
`2.5%` = quantile(bootoutput$ATE, probs = 0.025),
`97.5%` = quantile(bootoutput$ATE, probs = 0.975)
)
# Use kable from knitr to generate a nicely formatted Markdown table
kable(ate_stats, caption = "Summary Statistics for ATE")
summary(model$bootdata$ATE)
str(model)
summary(model$bootdata)
round(summary(model$bootdata),3)
summary(model$bootdata, round=3)
summary(model)
summary(model$bootdata)
lapply(summary(model$bootdata), function(x) round(x,3))
summary_data <- summary(model$bootdata)
lapply(summary_data, function(x) round(x,3))
options(digits=3)
summary(model$bootdata)
# options(digits=3)
summary(model$bootdata)
rounded_bootdata <- data.frame(lapply(model$bootdata, function(x) {
if(is.numeric(x)) round(x, 3) else x
}))
# Now summarize the rounded data
summary(rounded_bootdata)
bootdata_summary <- summary(model$bootdata)
knitr::kable(round(bootdata_summary, 3))
summary_stats <- summary(model$bootdata)
summary_stats_rounded <- as.data.frame(lapply(summary_stats, round, 3))
# Summarize data and ensure it is in a data frame format
summary_stats <- summary(model$bootdata)
# Identify numeric summaries
numeric_summaries <- sapply(summary_stats, is.numeric)
# Round only the numeric summaries to 3 decimal places
summary_stats_rounded <- summary_stats
summary_stats_rounded[numeric_summaries] <- lapply(summary_stats[numeric_summaries], round, 3)
# Convert to a data frame for display
summary_stats_df <- as.data.frame(summary_stats_rounded)
# Create a table using knitr::kable
knitr::kable(summary_stats_df, caption = "Summary Statistics for Bootstrap Results")
summary_stats <- summary(model$bootdata)
rounded_summary <- round(summary_stats, 3)
str(model$bootdata)
numeric_summary_stats <- sapply(model$bootdata, is.numeric)
summary_stats <- summary(model$bootdata[, numeric_summary_stats])
rounded_summary <- round(summary_stats, 3)
summary_stats <- model$bootdata %>%
summarise(across(where(is.numeric), ~ round(mean(.x), 3)),
across(where(is.numeric), ~ round(sd(.x), 3)),
across(where(is.numeric), ~ round(quantile(.x, probs = c(0.025, 0.975)), 3)))
library(tidyverse)
summary_stats <- model$bootdata %>%
summarise(across(where(is.numeric), ~ round(mean(.x), 3)),
across(where(is.numeric), ~ round(sd(.x), 3)),
across(where(is.numeric), ~ round(quantile(.x, probs = c(0.025, 0.975)), 3)))
str(summary(model$bootdata))
summary_stats <- summary(model$bootdata, digits=3)
# Use knitr to create a nice table
knitr::kable(summary_stats)
str(summary_stats)
summary_stats <- summary(model$bootdata, digits=3)
col_names <- c("Reference Effect", "Comparator Effect", "ATE")
knitr::kable(summary_stats, col.names = col_names, digits = 3)
summary_stats <- summary(model$bootdata, digits=3)
col_names <- c("Reference Effect", "Comparator Effect", "ATE")
knitr::kable(summary_stats, col.names = col_names)
summary_stats <- summary(model$bootdata, digits=3)
col_names <- c("Reference Effect", "Comparator Effect", "ATE")
knitr::kable(summary_stats)
head(model$bootdata)
bayesmsm <- function(ymodel,
nvisit,
reference = c(rep(0,nvisit)), # An example of never treated
comparator = c(rep(1,nvisit)),
family = "gaussian", # "gaussian" or "binomial"
data,
wmean = rep(1, 1000),
nboot = 1000,
optim_method = 'BFGS',
estimand = 'RD',
parallel = TRUE,
ncore = 6){
# load all the required R packages;
if (!require(foreach)){
install.packages("foreach",repos="http://cran.r-project.org")
library(foreach)
}
if (!require(doParallel)){
install.packages("doParallel",repos="http://cran.r-project.org")
library(doParallel)
}
if (!require(MCMCpack)){
install.packages("MCMCpack",repos="http://cran.r-project.org")
library(MCMCpack)
}
# return error message if the input weight vector has different length comparing to the outcome Y;
if (length(wmean) != nrow(data)) {
stop("The length of the weight vector does not match the length of Y.")
}
# load utility functions
extract_variables <- function(formula) {
# Get the terms of the formula
formula_terms <- terms(formula)
# Extract the response variable name (if there is one)
response_variable <- attr(formula_terms, "response")
response_name <- if (response_variable > 0) {
all_vars <- all.vars(formula)
all_vars[response_variable]
} else {NA}
# Extract predictor variable names
predictor_names <- attr(formula_terms, "term.labels")
# Return a list of response and predictor variables
list(response = response_name, predictors = predictor_names)
}
variables <- extract_variables(ymodel) # Extract variable names from the formula
Y_name <- variables$response
Y <- data[[Y_name]]
A_base <- data.frame(matrix(data = NA,
nrow = nrow(data),
ncol = length(variables$predictors)))
for (i in 1:length(variables$predictors)){
initial_vector <- variables$predictors[i]
split_vector <- strsplit(initial_vector, ":")
new_vector <- unlist(split_vector)
if (length(new_vector)==1){
A_base[,i] <-  data[, new_vector]
} else if (length(new_vector)>1){
A_base[,i] <-  apply(data[, new_vector],1,prod)
}
}
A <- cbind(1, A_base)
colnames(A)[2:ncol(A)]<- variables$predictors
wloglik_normal<-function(param,
Y,
A,
weight){
#number of observations;
n <- length(Y)
theta <- param[1:dim(A)[2]] #causal parameters on the mean
#number of parameter is determined by number of treatment variables, plus intercept;
sigma <- param[(dim(A)[2]+1)] # the remaining the parameter represent the standard deviation;
mmat <- as.matrix(A) #design matrix of the causal outcome model, e.g., A = cbind(1, a_1, a_2);
logl<- -0.5*log(sigma**2) - 0.5*((Y - mmat%*%theta)**2)/(sigma**2)
wlogl<-sum(weight*logl)
return(wlogl)
}
wloglik_binomial <- function(param,
Y,
A,
weight){
# number of observations;
n <- length(Y)
beta <- param[1:dim(A)[2]] # causal parameters on the log-odds scale (no sigma for binomial?)
mmat <- as.matrix(A)
eta<-mmat %*% beta # linear predictor
logl <- Y*eta - log(1+exp(eta))
wlogl<-sum(weight*logl)
return(wlogl)
}
expit <- function(x){exp(x) / (1+exp(x))}
if (family == "gaussian"){
wfn = wloglik_normal
inits1 <- c(rep(0.1, length(A)), 4)  # Default initial values, 4 is for the SD;
} else if (family == "binomial"){
wfn = wloglik_binomial
inits1 <- c(rep(0.1, length(A)))
} else if (!family %in% c("gaussian","binomial")){
stop("Current version only handles continuous (gaussian) and binary (binomial) outcomes.")
}
# Parallel computing for bootstrapping
if (parallel == TRUE){
numCores <- ncore
registerDoParallel(cores = numCores)
results <- foreach(i=1:nboot,
.combine = 'rbind',
.packages = 'MCMCpack') %dopar% {
calculate_effect <- function(intervention_levels, variables, param_estimates) {
# Start with the intercept term
effect<-effect_intercept<-param_estimates[1]
# Go through each predictor and add its contribution
for (i in 1:length(variables$predictors)) {
term <- variables$predictors[i]
term_variables <- unlist(strsplit(term, ":"))
term_index <- which(names(param_estimates) == term)
# Calculate the product of intervention levels for the interaction term
term_contribution <- param_estimates[term_index]
for (term_variable in term_variables) {
var_index <- which(variables$predictors == term_variable)
term_contribution <- term_contribution * intervention_levels[var_index]
}
# Add the term contribution to the effect
effect <- effect + term_contribution
}
return(effect)
}
results.it <- matrix(NA, 1, 3) #result matrix, three columns for bootest, effect_ref, and effect_comp;
alpha <- as.numeric(rdirichlet(1, rep(1.0, length(Y))))
maxim <- optim(inits1,
fn = wfn,
Y = Y,
A = A,
weight = alpha * wmean,
control = list(fnscale = -1),
method = optim_method,
hessian = FALSE)
names(maxim$par) <- c("(Intercept)", variables$predictors)
# Calculate the effects
results.it[1,1] <- calculate_effect(reference, variables, param_estimates=maxim$par)
results.it[1,2] <- calculate_effect(comparator, variables, param_estimates=maxim$par)
# Calculate the ATE
if (family == "binomial") { # binary outcomes
if (estimand == "RD") { # Risk Difference
results.it[1,3] <- expit(results.it[1,2]) - expit(results.it[1,1])
} else if (estimand == "RR") { # Relative Risk
results.it[1,3] <- expit(results.it[1,2]) / expit(results.it[1,1])
} else if (estimand == "OR") { # Odds Ratio
results.it[1,3] <- (expit(results.it[1,2]) / (1 - expit(results.it[1,2]))) /
(expit(results.it[1,1]) / (1 - expit(results.it[1,1])))
}
} else if (family == "gaussian"){ # continuous outcomes
if (estimand == "RD") { # Risk Difference
results.it[1,3] <- results.it[1,2] - results.it[1,1]
}
}
# combining parallel results;
cbind(i,results.it) #end of parallel;
}
#saving output for the parallel setting;
return(list(
mean = mean(results[,4]),
sd = sqrt(var(results[,4])),
quantile = quantile(results[,4], probs = c(0.025, 0.975)),
bootdata = data.frame(effect_reference = results[,2],
effect_comparator = results[,3],
ATE = results[,4]),
reference = reference,
comparator = comparator
))
}
else if (parallel == FALSE) {
bootest <- numeric(nboot)
effect_reference <- numeric(nboot)
effect_comparator <- numeric(nboot)
for (j in 1:nboot) {
alpha <- as.numeric(rdirichlet(1, rep(1.0, length(Y))))
maxim <- optim(inits1,
fn = wfn,
Y = Y,
A = A,
weight = alpha * wmean,
control = list(fnscale = -1),
method = optim_method,
hessian = FALSE)
names(maxim$par) <- c("(Intercept)", variables$predictors)
# Calculate the effects
effect_reference[j] <- calculate_effect(reference, variables, param_estimates=maxim$par)
effect_comparator[j] <- calculate_effect(comparator, variables, param_estimates=maxim$par)
# Calculate the ATE
if (family == "binomial") { # binary outcomes
if (estimand == "RD") { # Risk Difference
bootest[j] <- expit(effect_comparator[j]) - expit(effect_reference[j])
} else if (estimand == "RR") { # Relative Risk
bootest[j] <- expit(effect_comparator[j]) / expit(effect_reference[j])
} else if (estimand == "OR") { # Odds Ratio
bootest[j] <- (expit(effect_comparator[j]) / (1 - expit(effect_comparator[j]))) /
(expit(effect_reference[j]) / (1 - expit(effect_reference[j])))
}
} else if (family == "gaussian"){ # continuous outcomes
if (estimand == "RD") { # Risk Difference
bootest[j] <- effect_comparator[j] - effect_reference[j]
} else if (estimand %in% c("RR","OR")) {
# print a warning message that say for continuous outcome, RR and OR specification are ignored. RD is the causal estimate;
warning("For continuous outcomes, RR and OR specifications are ignored. RD is the only applicable causal estimate.")
}
}
}
#saving output for the non-parallel setting;
return(list(
mean = mean(bootest),
sd = sqrt(var(bootest)),
quantile = quantile(bootest, probs = c(0.025, 0.975)),
bootdata = data.frame(effect_reference, effect_comparator, ATE=bootest),
reference = reference,
comparator = comparator
))
}
}
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
bootoutput = model$bootdata
summary_stats <- summary(model$bootdata, digits=2)
col_names <- c("Reference Effect", "Comparator Effect", "ATE")
knitr::kable(summary_stats, col.names = col_names)
summary(model$bootdata)
summary(model$bootdata, digits=3)
summary(model$bootdata, digits=2)
?summary
summary(model$bootdata, digits=0)
summary(model$bootdata, digits=1)
summary(model$bootdata, digits=5)
summary(model$bootdata, digits=4)
summary(model$bootdata, digits=6)
summary(model$bootdata, digits=7)
summary_stats <- summary(model$bootdata, digits=7)
col_names <- c("Reference Effect", "Comparator Effect", "ATE")
knitr::kable(summary_stats, col.names = col_names)
summary_stats <- summary(model$bootdata, digits=3)
col_names <- c("Reference Effect", "Comparator Effect", "ATE")
knitr::kable(summary_stats, col.names = col_names)
plot_ATE <- function(input,
col_density = "blue",
fill_density = "lightblue",
main = "Posterior Predictive Distribution of Average Treatment Effect (ATE）",
xlab = "ATE", ylab = "Posterior Predictive Distribution",
xlim = NULL, ylim = NULL, ...) {
# Check if input is either a data frame or part of a model object
if (is.list(input) && "bootdata" %in% names(input)) {
# If input is a list and has bootdata, check for ATE column within bootdata
if ("ATE" %in% names(input$bootdata)) {
ate_values <- input$bootdata$ATE
} else {
stop("bootdata within the model object must have an 'ATE' column.")
}
} else if (is.data.frame(input) && "ATE" %in% names(input)) {
ate_values <- input$ATE
} else if (is.vector(input)) {
ate_values <- input
} else {
stop("input must be a vector of ATE estimates, a data frame, or a model object containing a 'bootdata' data frame with an 'ATE' column.")
}
ate_density <- density(ate_values)
ci <- quantile(ate_values, probs = c(0.025, 0.975))
density_ci <- density(ate_values, from = ci[1], to = ci[2])
plot(ate_density, col = col_density, main = main, xlab = xlab, ylab = ylab, xlim = xlim, ylim = ylim, ...)
polygon(c(density_ci$x, rev(density_ci$x)), c(rep(min(ate_density$y), length(density_ci$x)), rev(density_ci$y)), col = rgb(0, 0, 1, alpha = 0.3))
abline(v = mean(ate_values), col = "purple", lwd = 2, lty = 3)
abline(v = ci[1], col = "darkgreen", lty = 2)
abline(v = ci[2], col = "darkgreen", lty = 2)
legend_text <- c("ATE Density",
paste("Mean:", round(mean(ate_values), 3)),
paste("95% CI: [", round(ci[1], 3), ",", round(ci[2], 3), "]"))
legend("topright", legend = legend_text,
col = c(col_density, "purple", "darkgreen"),
lwd = 2, lty = c(1, 3, 2))
}
plot_ATE(model)
install_github("Kuan-Liu-Lab/bayesmsm")
library(devtools)
install_github("Kuan-Liu-Lab/bayesmsm")
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
bootoutput = model$bootdata
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
library(bayesmsm)
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = rep(1,1000),
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
testdata <- readr::read_csv("continuous_outcome_data.csv")
model <- bayesmsm(ymodel = y ~ a_1+a_2,
+                   nvisit = 2,
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata2,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
testdata <- readr::read_csv("continuous_outcome_data.csv")
library(WeightIt)
Wmsm <- weightitMSM(
list(a_1 ~ w1 + w2 + L1_1 + L2_1,
a_2 ~ w1 + w2 + L1_1 + L2_1 + L1_2 + L2_2 + a_1),
data = testdata,
method = "ps",
stabilize = TRUE)
# Wmsm$weights
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata2,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
model <- bayesmsm(ymodel = y ~ a_1+a_2,
nvisit = 2,
reference = c(rep(0,2)),
comparator = c(rep(1,2)),
family = "gaussian",
data = testdata,
wmean = Wmsm$weights,
nboot = 1000,
optim_method = "BFGS",
estimand = "RD",
parallel = TRUE,
ncore = 6)
bootoutput = model$bootdata
View(model)
length(testdata)
width(testdata)
length(testdata[,1])
View(model)
nrow(testdata)
?bayesmsm
